# -----------------------------------------------------------------------------
# Code Author          : Omar Alaa Eldeen
# Created On           : Friday - May 16th, 2025
# File Name            : kmp_proj.py
# Description           :This code implements the Knuth-Morris-Pratt (KMP) algorithm for string matching, and for academic purposes only.
# Code Title           : KMP String Matching Project (CS312)
# Course Name          : CS312 - Computer Algorithms
# Course Instructor    : Dr. Mahmoud Gamal
# Course Institution   : Faculty of Computer Science, Arab Academy for Science and Technology
# -----------------------------------------------------------------------------
import time
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import messagebox, scrolledtext

# --------- KMP Logic ---------

def compute_lps(pattern): # Longest Prefix Suffix
    lps = [0] * len(pattern) #lps[i] is the length of the longest proper prefix which is also a suffix for pattern[0..i]
    length = 0
    i = 1

    while i < len(pattern): 
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]
            else:
                lps[i] = 0
                i += 1
    return lps


def kmp_search(text, pattern):
    lps = compute_lps(pattern)
    matches = []
    i = j = 0

    while i < len(text):
        if text[i] == pattern[j]:
            i += 1
            j += 1
        if j == len(pattern):
            matches.append(i - j)
            j = lps[j - 1]
        elif i < len(text) and text[i] != pattern[j]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    return matches

# --------- GUI Code ---------

def search_and_display():
    text = text_input.get("1.0", tk.END).strip()
    pattern = pattern_input.get().strip()

    if not text or not pattern:
        messagebox.showwarning("Input Error", "Please enter both text and pattern.")
        return

    n = len(text)
    m = len(pattern)

    start = time.time()
    matches = kmp_search(text, pattern)
    end = time.time()
    duration = round(end - start, 6)

    result_text = f"📄 Text length: {n} characters\n"
    result_text += f"🔍 Pattern: '{pattern}' (length {m})\n\n"

    if matches:
        result_text += f"✅ The pattern was found {len(matches)} time(s) at positions: {matches}\n"
    else:
        result_text += f"❌ The pattern was not found in the text.\n"

    result_text += f"\n⏱ Search Time: {duration} seconds\n"

    # Add dynamic time complexity explanation
    result_text += f"🧠 Time Complexity: O(n + m) = O({n} + {m}) = O({n + m})\n"
    if n + m <= 1000:
        result_text += "📌 This input size is small, so the search is completed almost instantly.\n"
    elif n + m <= 10000:
        result_text += "📌 This is a medium-sized input. KMP handles it efficiently without any slowdown.\n"
    else:
        result_text += "📌 This is a large input, but thanks to KMP's linear time complexity, the search remains fast and scalable.\n"

    output_box.delete("1.0", tk.END)
    output_box.insert(tk.END, result_text)



def plot_performance():
    sizes = [100, 500, 1000, 5000, 10000]
    times = []
    pattern = "ABCAB"

    for size in sizes:
        text = "A" * (size - len(pattern)) + pattern
        start = time.time()
        kmp_search(text, pattern)
        end = time.time()
        times.append(end - start)

    plt.plot(sizes, times, marker='o', linestyle='-', color='green')
    plt.title("KMP Algorithm Performance")
    plt.xlabel("Text Length (n)")
    plt.ylabel("Time (seconds)")
    plt.grid(True)
    plt.show()

# --------- UI Layout ---------

app = tk.Tk()
app.title("KMP String Matching Project (CS312)")
app.geometry("700x600")
app.config(bg="#f0f0f0")

tk.Label(app, text="Enter the Text:", font=("Arial", 12)).pack(pady=(10, 0))
text_input = scrolledtext.ScrolledText(app, wrap=tk.WORD, width=80, height=8, font=("Consolas", 10))
text_input.pack(pady=(0, 10))

tk.Label(app, text="Enter the Pattern to Search:", font=("Arial", 12)).pack()
pattern_input = tk.Entry(app, font=("Consolas", 12), width=40)
pattern_input.pack(pady=(0, 10))

search_button = tk.Button(app, text="Search Pattern", command=search_and_display, bg="#4CAF50", fg="white", font=("Arial", 12))
search_button.pack(pady=5)

plot_button = tk.Button(app, text="Show Performance Graph", command=plot_performance, bg="#2196F3", fg="white", font=("Arial", 12))
plot_button.pack(pady=5)

tk.Label(app, text="Output:", font=("Arial", 12)).pack(pady=(10, 0))
output_box = scrolledtext.ScrolledText(app, wrap=tk.WORD, width=80, height=10, font=("Consolas", 10))
output_box.pack(pady=(0, 10))

app.mainloop()
